package net.wutnews.app.app.entiy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.wutnews.app.app.entiy.GetNewsListData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GET_NEWS_LIST_DATA.
*/
public class GetNewsListDataDao extends AbstractDao<GetNewsListData, Void> {

    public static final String TABLENAME = "GET_NEWS_LIST_DATA";

    /**
     * Properties of entity GetNewsListData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Post_title = new Property(1, String.class, "post_title", false, "POST_TITLE");
        public final static Property Post_src = new Property(2, String.class, "post_src", false, "POST_SRC");
        public final static Property Post_excerpt = new Property(3, String.class, "post_excerpt", false, "POST_EXCERPT");
        public final static Property Post_modified = new Property(4, String.class, "post_modified", false, "POST_MODIFIED");
        public final static Property Post_type = new Property(5, String.class, "post_type", false, "POST_TYPE");
        public final static Property Post_link = new Property(6, String.class, "post_link", false, "POST_LINK");
        public final static Property Post_collect = new Property(7, Boolean.class, "post_collect", false, "POST_COLLECT");
        public final static Property Term_id = new Property(8, String.class, "term_id", false, "TERM_ID");
        public final static Property Thumb = new Property(9, String.class, "thumb", false, "THUMB");
    };


    public GetNewsListDataDao(DaoConfig config) {
        super(config);
    }
    
    public GetNewsListDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GET_NEWS_LIST_DATA' (" + //
                "'ID' TEXT," + // 0: id
                "'POST_TITLE' TEXT," + // 1: post_title
                "'POST_SRC' TEXT," + // 2: post_src
                "'POST_EXCERPT' TEXT," + // 3: post_excerpt
                "'POST_MODIFIED' TEXT," + // 4: post_modified
                "'POST_TYPE' TEXT," + // 5: post_type
                "'POST_LINK' TEXT," + // 6: post_link
                "'POST_COLLECT' INTEGER," + // 7: post_collect
                "'TERM_ID' TEXT," + // 8: term_id
                "'THUMB' TEXT);"); // 9: thumb
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GET_NEWS_LIST_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GetNewsListData entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String post_title = entity.getPost_title();
        if (post_title != null) {
            stmt.bindString(2, post_title);
        }
 
        String post_src = entity.getPost_src();
        if (post_src != null) {
            stmt.bindString(3, post_src);
        }
 
        String post_excerpt = entity.getPost_excerpt();
        if (post_excerpt != null) {
            stmt.bindString(4, post_excerpt);
        }
 
        String post_modified = entity.getPost_modified();
        if (post_modified != null) {
            stmt.bindString(5, post_modified);
        }
 
        String post_type = entity.getPost_type();
        if (post_type != null) {
            stmt.bindString(6, post_type);
        }
 
        String post_link = entity.getPost_link();
        if (post_link != null) {
            stmt.bindString(7, post_link);
        }
 
        Boolean post_collect = entity.getPost_collect();
        if (post_collect != null) {
            stmt.bindLong(8, post_collect ? 1l: 0l);
        }
 
        String term_id = entity.getTerm_id();
        if (term_id != null) {
            stmt.bindString(9, term_id);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(10, thumb);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GetNewsListData readEntity(Cursor cursor, int offset) {
        GetNewsListData entity = new GetNewsListData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // post_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // post_src
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // post_excerpt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // post_modified
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // post_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // post_link
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // post_collect
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // term_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // thumb
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GetNewsListData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPost_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPost_src(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPost_excerpt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPost_modified(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPost_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPost_link(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPost_collect(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setTerm_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setThumb(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GetNewsListData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GetNewsListData entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
